<?php

/**
 * @file
 * Provides basic functionality and customization for ps267.org.
 *
 * When enabled this module makes small improvements to the editorial
 * experience and functionality of the site.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter() for the node-resource-page-form form.
 */
function ps267_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();

  if ($node->bundle() == 'resource_page') {
    $children_keys = Element::children($form['field_resource_icon']['widget']);
    foreach ($children_keys as $key) {
      $form['field_resource_icon']['widget'][$key]['icon_name']['#field_prefix'] = '';
      $form['field_resource_icon']['widget'][$key]['icon_name']['#title'] = $form['field_resource_icon']['widget'][$key]['#title'];

    }
  }

}

  /**
 * Implements hook_form_FORM_ID_alter() for the user-register-form form.
 */
function ps267_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['entity_options']['#access'] = FALSE;
}

/**
 * Implements hook_widget_WIDGET_TYPE_alter.
 *
 * @see https://www.drupal.org/project/paragraphs/issues/2868155#comment-12566372
 */
function ps267_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context){
  if ($element['#paragraph_type'] == "text_with_image") {
    $element['subform']['field_text_with_image_button']['widget'][0]['title']['#title'] = t('Button text');
  }
}

/**
 * Implements hook_ds_pre_render_alter.
 */
function ps267_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {

  // For event teasers, only show the title if no image exists.
  if ($context['entity_type'] == 'node' && $context['bundle'] == 'fundraiser' && $context['view_mode'] == 'teaser') {
    if ($context['entity']->get('field_fundraiser_image')->isEmpty()) {
      $layout_render_array['ds_content']['field_raiser_image']['#access'] == FALSE;
    }
    else {
      $layout_render_array['ds_content']['node_title']['#access'] = FALSE;
    }
  }

  // Modify paragraphs.
  if ($context['entity_type'] == 'paragraph') {

    switch ($context['bundle']) {
      case 'text_with_image':
        // Set class based on image position.
        if ($context['entity']->hasField('field_text_with_image_position') && $context['entity']->get('field_text_with_image_position')->value == "Right") {
          $layout_render_array['ds_content']['field_text_with_image_image'][0]['#item_attributes']['class'][] = 'image-right';
        }
        else {
          $layout_render_array['ds_content']['field_text_with_image_image'][0]['#item_attributes']['class'][] = 'image-left';
        }
        break;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function ps267_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->isAnonymous() == FALSE) {
    $attachments['#attached']['library'][] = 'ps267/ps267-admin';
  }
}


/**
 * Implements hook_views_post_execute().
 */
function ps267_views_post_execute(ViewExecutable $view) {
  if ($view->id() == 'calendar' && $view->current_display == 'mini_cal') {
    // Handle the `Subscribe` link.
    $title = 'calendar';  //@todo make this translatable
    $url = $view->display_handler->getUrl();
    $url_options = [
      'absolute' => TRUE,
    ];

    $url->setOptions($url_options);
    $url = preg_replace('/https?/', 'webcal', $url->toString());

    // Add the RSS icon to the view.
    $view->feedIcons[] = [
      '#theme' => 'feed_icon',
      '#url' => $url,
      '#title' => $title,
    ];
  }
}